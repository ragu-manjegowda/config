# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

shopt -s histappend
HISTFILESIZE=1000000
HISTSIZE=1000000
HISTCONTROL=ignoreboth
HISTIGNORE='ls:bg:fg:history:exit:clear:clea:clar:cler'
HISTTIMEFORMAT='%F %T '
shopt -s cmdhist
PROMPT_COMMAND='history -a'

if [ -f "$BASH_DIR"/bash_custom ]; then
    . "$BASH_DIR"/bash_custom
fi

# use nvim if installed, vi default
case "$(command -v nvim)" in
    */nvim)
        VIM=nvim
        alias vim="nvim" ;;
    *)  VIM=vi ;;
esac

export EDITOR=$VIM
export FCEDIT=$EDITOR

eval "$(starship init bash)"

if [ -f "$BASH_DIR/fzf.bash" ] ; then
    source "$BASH_DIR/fzf.bash"
fi

################## config aliases #############################################

## Config alias
alias config='git --git-dir=$HOME/.config.git/ --work-tree=$HOME'
alias cvim='GIT_DIR=$HOME/.config.git/ GIT_WORK_TREE=$HOME vim'

# Pretty log messages
function _config_log_prettily(){
  if ! [ -z "$1" ]; then
    config log --pretty="$1" "${@:2}"
  fi
}

alias ca="config add"
alias ccd='config diff'
alias ccds='config diff --cached'
alias ccda='config diff HEAD'
alias ccm='config commit -s'
alias cco='config checkout'
alias cfa='config fetch --all --prune'
alias cpulla='config pull --rebase --autostash'
alias cpush='config push'
alias cst='config status'
alias cstv='cvim +Git +only'
# alias csu='config submodule update --remote --rebase'
alias csu='config submodule foreach git pull --recurse-submodules --rebase'

_fzf_git_fzf() {
  fzf -- \
    --layout=reverse --multi --border \
    --border-label-pos=2 \
    --color='header:italic:underline,label:blue' \
    --preview-window='right,border-left' \
    --bind='ctrl-/:change-preview-window(down,border-top|hidden|)' "$@"
}

_fzf_config_files() {
  GIT_DIR="$HOME/.config.git" WORK_TREE="$HOME" _fzf_git_files
}

_fzf_config_branches() {
  GIT_DIR="$HOME/.config.git" WORK_TREE="$HOME" _fzf_git_branches
}

_fzf_config_tags() {
  GIT_DIR="$HOME/.config.git" WORK_TREE="$HOME" _fzf_git_tags
}

_fzf_config_hashes() {
  GIT_DIR="$HOME/.config.git" WORK_TREE="$HOME" _fzf_git_hashes
}

_fzf_config_remotes() {
  GIT_DIR="$HOME/.config.git" WORK_TREE="$HOME" _fzf_git_remotes
}

_fzf_config_stashes() {
  GIT_DIR="$HOME/.config.git" WORK_TREE="$HOME" _fzf_git_stashes
}

_fzf_config_lreflogs() {
  GIT_DIR="$HOME/.config.git" WORK_TREE="$HOME" _fzf_git_lreflogs
}

_fzf_config_each_ref() {
  GIT_DIR="$HOME/.config.git" WORK_TREE="$HOME" _fzf_git_each_ref
}

_fzf_config_worktrees() {
  GIT_DIR="$HOME/.config.git" WORK_TREE="$HOME" _fzf_git_worktrees
}

__fzf_config_init() {
    bind '"\er": redraw-current-line'
    local o
    for o in "$@"; do
      bind '"\eg'${o:0:1}'": "`_fzf_config_'$o'`\e\C-e\er"'
    done
  }

__fzf_config_init files branches tags remotes hashes stashes lreflogs each_ref worktrees
